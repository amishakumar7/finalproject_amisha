#[cfg(test)]
mod tests {
    use super::*;
    use crate::graph::Graph;

    fn sample_graph() -> Graph {
        let mut graph = Graph::new();
        graph.add_edge(0, 1);
        graph.add_edge(1, 2);
        graph.add_edge(2, 0); // Triangle: 0-1-2
        graph.add_edge(2, 3);
        graph.add_edge(3, 4); // No triangle here
        graph
    }

    #[test]
    fn test_load_graph_from_file() {
        let graph = Graph::load_graph_from_file("test_data.txt").expect("Failed to load graph");
        assert_eq!(graph.neighbors(0).unwrap().len(), 2);
        assert_eq!(graph.neighbors(1).unwrap().len(), 2);
        assert_eq!(graph.neighbors(2).unwrap().len(), 3);
    }

    #[test]
    fn test_triangle_count_for_node() {
        let graph = sample_graph();
        assert_eq!(graph.count_triangles_for_node(0), 1);
        assert_eq!(graph.count_triangles_for_node(2), 1);
        assert_eq!(graph.count_triangles_for_node(3), 0);
    }

    #[test]
    fn test_count_all_triangles() {
        let graph = sample_graph();
        assert_eq!(graph.count_all_triangles(), 1); // One triangle: 0-1-2
    }

    #[test]
    fn test_local_clustering_coefficient() {
        let graph = sample_graph();
        assert_eq!(
            graph.compute_local_clustering_coefficient(0),
            Some(1.0)
        ); // Node 0 is part of a single triangle, and all possible connections exist
        assert_eq!(
            graph.compute_local_clustering_coefficient(2),
            Some(1.0 / 3.0)
        ); // Node 2 has 1 triangle out of 3 possible connections
        assert_eq!(
            graph.compute_local_clustering_coefficient(3),
            Some(0.0)
        ); // Node 3 has no triangles
    }

    #[test]
    fn test_average_clustering_coefficient() {
        let graph = sample_graph();
        let average = graph.compute_average_clustering_coefficient();
        assert!((average - 0.3333).abs() < 1e-4); // Averaging coefficients
    }
}